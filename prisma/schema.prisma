generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["darwin-arm64", "darwin"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model BanRequest {
  id         String   @id
  author_id  String
  target_id  String
  guild_id   String
  reason     String
  created_at DateTime @default(now())
  status     Int      @default(1)
  /// ID of the auto-mute infraction
  mute_id    Int?
}

model MuteRequest {
  id         String   @id
  author_id  String
  target_id  String
  guild_id   String
  reason     String
  created_at DateTime @default(now())
  status     Int      @default(1)
  duration   Int
}

model Message {
  id           String   @id
  author_id    String
  channel_id   String
  guild_id     String
  created_at   DateTime
  deleted      Boolean  @default(false)
  content      String?
  sticker_id   String?
  /// ID of the message this message is replying to
  reference_id String?
}

model Infraction {
  id                Int       @id @default(autoincrement())
  action            Int
  flag              Int       @default(0)
  guild_id          String
  executor_id       String
  target_id         String
  created_at        DateTime  @default(now())
  reason            String?
  request_author_id String?
  expires_at        DateTime?
  updated_at        DateTime?
  updated_by        String?
  archived_at       DateTime?
  archived_by       String?
}

model MessageReport {
  /// ID of the report message
  id              String   @id
  /// ID of the message that was reported
  message_id      String   @unique
  /// Channel where the message was sent
  channel_id      String
  /// Author of the reported message
  author_id       String
  /// Author of the report
  reported_by     String
  /// Where the report was created
  created_at      DateTime @default(now())
  /// Status of the report
  status          Int      @default(4)
  /// Additional report context
  flags           Int
  /// Whether the message was deleted
  message_deleted Boolean  @default(false)
  /// ID of the user that resolved the report
  resolved_by     String?
  /// Content of the reported message
  content         String?
}

model UserReport {
  id          String   @id
  target_id   String
  guild_id    String
  reported_by String
  created_at  DateTime @default(now())
  status      Int      @default(2)
  reason      String
  /// ID of the user that resolved the report
  resolved_by String?
}

model TemporaryRole {
  member_id  String
  role_id    String
  guild_id   String
  expires_at DateTime

  @@id([member_id, role_id, guild_id])
}

model TemporaryMessage {
  message_id String
  channel_id String
  expires_at DateTime

  @@id([message_id, channel_id])
}

model Reminder {
  id         String   @id @default(uuid())
  author_id  String
  channel_id String
  reminder   String
  created_at DateTime @default(now())
  expires_at DateTime
}